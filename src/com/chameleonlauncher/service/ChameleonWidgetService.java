package com.chameleonlauncher.service;

import java.util.ArrayList;
import java.util.UUID;
import org.json.JSONObject;


import android.app.IntentService;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.ServiceInfo;
import android.util.Log;



public abstract class ChameleonWidgetService extends IntentService {

	static public final String CHAMELEON_PACKAGE_NAME = "com.chameleonlauncher"; 	//Package name for paid version of Chameleon.
	static public final String CHAMELEON_PREORDER_PACKAGE_NAME = "com.chameleonlauncher.preorder";	//Package name for Kickstarter version of Chameleon.
	static public final String CHAMELEON_SERVICE_REGISTRAR_ACTIVITY_NAME = "com.teknision.android.chameleon.intent.RemoteServiceRegistrar";	//Chameleon Registrar Service
	

	//Registration Tokens
	private String request_token=""; //Generated by Service
	private String response_token="";	//Generated by Chameleon
	
	private boolean awaiting_response_from_chameleon=false; //Designates that a registration response is pending.
	private ArrayList<Intent> pending_resend_intents; //Intents recieved while registration has been taking place.
	
	
	public ChameleonWidgetService()
	{
		super("ChameleonRemoteService");
	}
	
	public ChameleonWidgetService(String name)
	{
		super(name);
	}


	
	@Override
	/*
	 - Starts sticky so registration can take place. 
	 */
	public int onStartCommand (Intent intent, int flags, int startId)
	{
		onHandleIntent(intent);
		return START_STICKY;
	}
	
	
	@Override
	/*
	 - Handles all incoming intents
	 */
	protected void onHandleIntent(Intent intent) {

		if(isExplicitContractRequest(intent)){
			//force new contract
			requestRegister();
		} else if(isRegistered()){
			//Inspect extras to ensure intent is from Chameleon
			if(isValidChameleonIntent(intent)){
				onHandleValidChameleonIntent(intent);
			}else{
				//reject intent
				onHandleInValidChameleonIntent(intent);
			}
			
		}else{
			//Not a contract request
			if(!isRegistering()){
				//Not registering
				if(storeForResendRequest(intent)){
					//Storing and registering
					requestRegister();
				}else{
					//Can't store, rejecting
					onHandleInValidChameleonIntent(intent);
				}
			}else{
				//Is Registering
				if(processRegisterResponse(intent)){
					//finalize registration
					confirmRegister();
				}else{
					//reject intent
					onHandleInValidChameleonIntent(intent);
				}
			}
		}
	}
	
	/*
	 - Builds request object for onWidgetIntent
	 */
	protected void onHandleValidChameleonIntent(Intent intent) {
		String baseurl="";
		if(intent.hasExtra(ChameleonWidgetServiceIntent.EXTRA_WIDGET_BASEURL))baseurl=intent.getStringExtra(ChameleonWidgetServiceIntent.EXTRA_WIDGET_BASEURL);
		String instance="";
		if(intent.hasExtra(ChameleonWidgetServiceIntent.EXTRA_WIDGET_ID))instance=intent.getStringExtra(ChameleonWidgetServiceIntent.EXTRA_WIDGET_ID);
		String request="";
		if(intent.hasExtra(ChameleonWidgetServiceIntent.EXTRA_WIDGET_REQUEST_ID))request=intent.getStringExtra(ChameleonWidgetServiceIntent.EXTRA_WIDGET_REQUEST_ID);
		
		JSONObject data=null;
		if(intent.hasExtra(ChameleonWidgetServiceIntent.EXTRA_JSON_DATA)){
			try{
				data=new JSONObject(intent.getStringExtra(ChameleonWidgetServiceIntent.EXTRA_JSON_DATA));
			}catch(Exception e){
				e.printStackTrace();
			}
		}
		ChameleonWidgetRequest request_obj=new ChameleonWidgetRequest();
		request_obj.intent=intent;
		request_obj.baseurl=baseurl;
		request_obj.instanceId=instance;
		request_obj.requestId=request;
		request_obj.data=data;
		onWidgetIntent(request_obj);
		
	}
	
	/*
	 - Override if anything special needs to be done to rejected intents
	 */
	protected void onHandleInValidChameleonIntent(Intent intent) {
		
	}
	
	/*
	 - Must be implemented in a subclass.
	 */
	public abstract void onWidgetIntent(ChameleonWidgetRequest request);
	
	
	/*
	 - Sends a JSON object to the Chameleon widget that made this request.
	 */
	public void respondTo(ChameleonWidgetRequest request, JSONObject response_data)
	{
		
		ComponentName chameleon=getChameleonComponent();
		
		if(chameleon!=null){
			Intent r=new Intent();
			
			
			r.setAction(ChameleonWidgetServiceIntent.ACTION_WIDGET_RESPONSE);
			r.putExtra(ChameleonWidgetServiceIntent.EXTRA_WIDGET_ID, request.instanceId);
			r.putExtra(ChameleonWidgetServiceIntent.EXTRA_WIDGET_REQUEST_ID, request.requestId);
			if(response_data!=null)r.putExtra(ChameleonWidgetServiceIntent.EXTRA_JSON_DATA, response_data.toString());
			r.putExtra(ChameleonWidgetServiceIntent.EXTRA_REQUEST_TOKEN, request_token);
			r.putExtra(ChameleonWidgetServiceIntent.EXTRA_RESPONSE_TOKEN, response_token);
			
			//Add service identity
			r.putExtra(ChameleonWidgetServiceIntent.EXTRA_COMPONENT_PACKAGE_NAME,getPackageName());
			r.putExtra(ChameleonWidgetServiceIntent.EXTRA_COMPONENT_NAME,getClass().getName());
			
			r.setComponent(chameleon);
			startService(r);
			//sendBroadcast(r);
		}
		
	}
	
	
	/*
	 - Stores intent so it can be rerequest from Chameleon after contract is completed.
	 */
	private boolean storeForResendRequest(Intent intent)
	{
		boolean r=false;
		if(intent!=null && intent.hasExtra(ChameleonWidgetServiceIntent.EXTRA_WIDGET_REQUEST_ID)){
			initPendingResendIntents();
			pending_resend_intents.add(intent);
			r=true;
		}
		return r;
	}
	
	/*
	 - initializes pending resend array
	 */
	private void initPendingResendIntents()
	{
		if(pending_resend_intents==null)pending_resend_intents=new ArrayList<Intent>();
	}
	
	
	/*
	 - builds a string of request ids to send to Chameleon to re-request
	 */
	private String[] getResendIntentsAndClear()
	{
		String[] r=null;
		if(pending_resend_intents!=null && pending_resend_intents.size()>0){
			r=new String[pending_resend_intents.size()];
			int i=0;
			for(Intent intent:pending_resend_intents){
				r[i]=intent.getStringExtra(ChameleonWidgetServiceIntent.EXTRA_WIDGET_REQUEST_ID);
				i++;
			}
			pending_resend_intents.clear();
		}
		return r;
	}
	
	/*
	 - Returns true if intent has credentials that match the service contract
	 */
	private boolean isValidChameleonIntent(Intent intent)
	{
		boolean r=false;
		if(
				intent.hasExtra(ChameleonWidgetServiceIntent.EXTRA_REQUEST_TOKEN) &&
				intent.hasExtra(ChameleonWidgetServiceIntent.EXTRA_RESPONSE_TOKEN)
		){
			
			String i_request_token=intent.getStringExtra(ChameleonWidgetServiceIntent.EXTRA_REQUEST_TOKEN);
			String i_response_token=intent.getStringExtra(ChameleonWidgetServiceIntent.EXTRA_RESPONSE_TOKEN);
			if(i_request_token.contentEquals(request_token) && i_response_token.contentEquals(response_token)){
				r=true;
			}
			
		}
		return r;
	}
	
	/*
	 - Returns true if the intent wants a new contract to be established
	 */
	private boolean isExplicitContractRequest(Intent intent)
	{
		boolean r=false;
		if(intent!=null && intent.getAction()!=null && intent.getAction().contentEquals(ChameleonWidgetServiceIntent.ACTION_REQUEST_CONTRACT))r=true;
		return r;
	}
	
	/*
	 - Returns true if the service believes it is registered with Chameleon
	 */
	protected boolean isRegistered()
	{
		return !request_token.contentEquals("") && !response_token.contentEquals("");
	}
	
	/*
	 - Returns true if the service believes it is registering with Chameleon
	 */
	protected boolean isRegistering()
	{
		return !request_token.contentEquals("") && response_token.contentEquals("");
	}
	
	
	
	/*
	 - Handshake Step 1
	 - Builds a unique requestid and sends it to Chameleon for registration with component identification
	 */
	public boolean requestRegister()
	{
		boolean r=false;
		
		request_token="";
		response_token="";
		
		ComponentName chameleon=getChameleonComponent();
		
		if(chameleon!=null){
			
			ChameleonWidgetServiceIntent intent=new ChameleonWidgetServiceIntent();
			
			//target Chameleon for request
			intent.setAction(ChameleonWidgetServiceIntent.ACTION_SERVICE_REQUEST_REGISTER);	
			intent.setComponent(chameleon);
			
			//create and add request token
			request_token=generateServiceGUID();
			intent.putExtra(ChameleonWidgetServiceIntent.EXTRA_REQUEST_TOKEN, request_token);
			
			//Add service identity
			intent.putExtra(ChameleonWidgetServiceIntent.EXTRA_COMPONENT_PACKAGE_NAME,getPackageName());
			intent.putExtra(ChameleonWidgetServiceIntent.EXTRA_COMPONENT_NAME,getClass().getName());
			
			r=true;
			awaiting_response_from_chameleon=true;
			startService(intent);
			
		}
		return r;
	}
	
	/*
	 - Handshake Step 2
	 - Chameleon builds a unique responseid and sends it back to this service along with the request id.
	 */
	private boolean processRegisterResponse(Intent intent)
	{
		boolean r=false;
		
		if(		awaiting_response_from_chameleon && 
				intent!=null &&
				intent.getAction()!=null &&
				intent.getAction().contentEquals(ChameleonWidgetServiceIntent.ACTION_SERVICE_REQUEST_REGISTER_CONFIRMATION) && 
				intent.hasExtra(ChameleonWidgetServiceIntent.EXTRA_REQUEST_TOKEN) && 
				intent.hasExtra(ChameleonWidgetServiceIntent.EXTRA_RESPONSE_TOKEN)
		){
			String i_request_token=intent.getStringExtra(ChameleonWidgetServiceIntent.EXTRA_REQUEST_TOKEN);
			if(i_request_token!=null && i_request_token.contentEquals(request_token)){
				response_token=intent.getStringExtra(ChameleonWidgetServiceIntent.EXTRA_RESPONSE_TOKEN);
				awaiting_response_from_chameleon=false;
				r=true;
			}
		}
		return r;
	}
	
	
	
	
	
	/*
	 - Handshake Step 3
	 - Service sends both requestid and responseid back to Chameleon
	 - also sends any intent requestids that should be resent now that a contract exists
	 */
	private boolean confirmRegister()
	{
		boolean r=false;
		
		ComponentName chameleon=getChameleonComponent();
		
		if(chameleon!=null){
			ChameleonWidgetServiceIntent intent=new ChameleonWidgetServiceIntent();
			
			//target Chameleon for request
			intent.setAction(ChameleonWidgetServiceIntent.ACTION_SERVICE_CONFIRM_REGISTER);	
			intent.setComponent(chameleon);
			
			//create and add both tokens
			intent.putExtra(ChameleonWidgetServiceIntent.EXTRA_REQUEST_TOKEN, request_token);
			intent.putExtra(ChameleonWidgetServiceIntent.EXTRA_RESPONSE_TOKEN, response_token);
			
			//Add service identity
			intent.putExtra(ChameleonWidgetServiceIntent.EXTRA_COMPONENT_PACKAGE_NAME,getPackageName());
			intent.putExtra(ChameleonWidgetServiceIntent.EXTRA_COMPONENT_NAME,getClass().getName());
			
			if(pending_resend_intents!=null && pending_resend_intents.size()>0){
				intent.putExtra(ChameleonWidgetServiceIntent.EXTRA_RESEND_INTENTS, getResendIntentsAndClear());
			}
			
			r=true;
			startService(intent);
			
		}
		return r;
	}
	
	
	
	
	/*
	 - generates a random UI string
	 */
	private String generateServiceGUID()
	{
		return UUID.randomUUID().toString();
	}
	
	/*
	 - Returns the proper installed version of Chameleon
	 */
	private ComponentName getChameleonComponent()
	{
		ComponentName r = null;
		if(componentExists(this, CHAMELEON_PACKAGE_NAME, CHAMELEON_SERVICE_REGISTRAR_ACTIVITY_NAME)){
			r=new ComponentName(CHAMELEON_PACKAGE_NAME, CHAMELEON_SERVICE_REGISTRAR_ACTIVITY_NAME);
		}else if(componentExists(this, CHAMELEON_PREORDER_PACKAGE_NAME, CHAMELEON_SERVICE_REGISTRAR_ACTIVITY_NAME)){
			r=new ComponentName(CHAMELEON_PREORDER_PACKAGE_NAME, CHAMELEON_SERVICE_REGISTRAR_ACTIVITY_NAME);
		}
		return r;
	}
	
	
	/*
	 - Returns true if the named component exists
	 */
	private boolean componentExists(Context context, String pckg, String name)
	{
		boolean r=false;
		
	   PackageManager pm=context.getPackageManager();   
	   try {
		  PackageInfo info=pm.getPackageInfo(pckg,PackageManager.GET_META_DATA|PackageManager.GET_ACTIVITIES|PackageManager.GET_SERVICES);
		  
		  if(name.contentEquals("")){
			  if(info!=null)r=true;
		  }else{
			  if(info.activities!=null){
				  for(ActivityInfo activityinfo:info.activities){
					  if(activityinfo.name.contentEquals(name)){
						  r=true;
						  break;
					  }
				  }
			  }
			  
			  if(!r && info.services!=null){
				  for(ServiceInfo serviceinfo:info.services){
					  if(serviceinfo.name.contentEquals(name)){
						  r=true;
						  break;
					  }
				  }
			  }
		  }
		   
       } catch (Exception e) {
    	   e.printStackTrace();
	    	r=false;
	   }  	
       return r;
	}

}